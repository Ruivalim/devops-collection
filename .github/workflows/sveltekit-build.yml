name: 🚀 SvelteKit Build & Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/sveltekit/**'
      - '.github/workflows/sveltekit-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/sveltekit/**'
      - '.github/workflows/sveltekit-build.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sveltekit-app

jobs:
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/sveltekit
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/sveltekit/package-lock.json'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run linter
        run: npm run lint

      - name: 🎨 Check formatting
        run: npm run format:check

      - name: 🔧 Type check
        run: npm run check

      - name: 🧪 Run tests
        run: npm run test:unit

      - name: 🌐 Run e2e tests
        run: |
          npm run build
          npm run test:e2e

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./apps/sveltekit/coverage
          fail_ci_if_error: false

  build:
    name: 🏗️ Build Multi-Platform
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      metadata: ${{ steps.meta.outputs.json }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD'}}-{{sha}}

      - name: 🏗️ Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/sveltekit/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            VITE_APP_VERSION=${{ github.sha }}
            VITE_BUILD_TIME=${{ github.event.head_commit.timestamp }}

      - name: 📋 Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: 📤 Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: 🔗 Merge Multi-Platform Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{date 'YYYYMMDD'}}-{{sha}}

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔗 Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: 🔍 Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: merge
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [merge, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.yourapp.com
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔑 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > /tmp/kubeconfig
          echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

      - name: 🚀 Deploy to staging
        run: |
          kubectl set image deployment/sveltekit-app \
            sveltekit-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-$(date +%Y%m%d)-${{ github.sha }} \
            -n staging
          kubectl rollout status deployment/sveltekit-app -n staging --timeout=300s

  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [merge, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://yourapp.com
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 🔑 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > /tmp/kubeconfig
          echo "KUBECONFIG=/tmp/kubeconfig" >> $GITHUB_ENV

      - name: 🚀 Deploy to production
        run: |
          kubectl set image deployment/sveltekit-app \
            sveltekit-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -n production
          kubectl rollout status deployment/sveltekit-app -n production --timeout=300s

      - name: 📝 Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: sveltekit-v${{ github.run_number }}
          release_name: SvelteKit App v${{ github.run_number }}
          body: |
            🚀 **SvelteKit Application Release**
            
            **Changes in this release:**
            ${{ github.event.head_commit.message }}
            
            **Docker Image:** 
            `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false